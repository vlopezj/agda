------------------------------------------------------------------------
-- Release notes for Agda version 2.4.4
------------------------------------------------------------------------

TODO: replace X by a suitable number.
Important changes since 2.4.2.X:

Installation and infrastructure
===============================

* For best performance, compile Agda with ghc-7.8.
  Agda is significantly slower if compiled with ghc-7.6.
  [Issue 1347]

Pragmas and options
===================

* New Pragma COMPILED_DECLARE_DATA for binding recursively defined
  Haskell data types to recursively defined Agda data types.

  If you have a Haskell type like

    {-# LANGUAGE GADTs #-}

    module Issue223 where

    data A where
      BA :: B -> A

    data B where
      AB :: A -> B
      BB :: B

  You can now bind it to corresponding mutual Agda inductive data
  types as follows:

    {-# IMPORT Issue223 #-}

    data A : Set
    {-# COMPILED_DECLARE_DATA A Issue223.A #-}
    data B : Set
    {-# COMPILED_DECLARE_DATA B Issue223.B #-}

    data A where
      BA : B → A

    {-# COMPILED_DATA A Issue223.A Issue223.BA #-}
    data B where
      AB : A → B
      BB : B

    {-# COMPILED_DATA B Issue223.B Issue223.AB Issue223.BB #-}

  This fixes issue 223.

* New option --exact-split.

  The --exact-split flag causes Agda to raise an error whenever a clause in a
  definition by pattern matching cannot be made to hold definitionally (i.e. as
  a reduction rule). Specific clauses can be excluded from this check by means
  of the {-# CATCHALL #-} pragma.

  For instance, the following definition will be rejected as the second clause
  cannot be made to hold definitionally:

    min : Nat → Nat → Nat
    min zero    y       = zero
    min x       zero    = zero
    min (suc x) (suc y) = suc (min x y)

  Catchall clauses have to be marked as such, for instance:

    eq : Nat → Nat → Bool
    eq zero    zero    = true
    eq (suc m) (suc n) = eq m n
    {-# CATCHALL #-}
    eq _       _       = false

* New option: --no-exact-split.

  This option can be used to override a global --exact-split in a
  file, by adding a pragma {-# OPTIONS --no-exact-split #-}.

* New options: --sharing and --no-sharing.

  These options are used to enable/disable sharing and call-by-need evaluation.
  The default is --no-sharing.

  Note that they cannot appear in an OPTIONS pragma, but have to be given as
  command line arguments or added to the Agda Program Args from Emacs with M-x
  customize-group agda2.

* New pragma DISPLAY.

  {-# DISPLAY f e1 .. en = e #-}

  This causes f e1 .. en to be printed as e, where ei can bind variables used
  in e. The expressions ei and e are scope checked, but not type checked.

  For example this can be used to print overloaded (instance) functions with
  the overloaded name:

    instance
      NumNat : Num Nat
      NumNat = record { ..; _+_ = natPlus }

    {-# DISPLAY natPlus a b = a + b #-}

  Limitations

    Left-hand sides are restricted to variables, constructors, defined
    functions or types, and literals. In particular, lambdas are not allowed in
    left-hand sides.

    Since DISPLAY pragmas are not type checked implicit argument insertion may
    not work properly if the type of f computes to an implicit function space
    after pattern matching.

* Removed pragma {-# ETA R #-}

  The pragma {-# ETA R #-} is replaced by the eta-equality directive
  inside record declarations.

* New option --no-eta-equality.

  The --no-eta-equality flag disables eta rules for declared record types.
  It has the same effect as no-eta-equality inside each declaration of
  a record type R.

  If used with the OPTIONS pragma it will not affect records defined
  in other modules.


Language
========

Reflection
----------

* Unquoting function definitions.

  There is a new declaration

    unquoteDef x = e

  Here e should have type LIST AGDACLAUSE and evaluate to a closed value. Since
  unquoteDef only contains the function clauses you need a separate type
  signature. For instance, given that you have a 'derivingEq' function that
  builds decidable equality functions, you would say

    eqNat : (x y : Nat) → Dec (x ≡ y)
    unquoteDef eqNat = derivingEq (quote Nat) (quote eqNat)

  Note that, in contrast to unquoteDecl, you have to quote the name of the
  defined function to get a QNAME.

  The main advantage of unquoteDef over unquoteDecl is that unquoteDef is
  allowed in mutual blocks, allowing you to create mutually recursive
  definitions by unquoting.

* The reflection interface now exposes the name hint (as a string)
  for variables. As before, the actual binding structure is with
  de Bruijn indices. The String value is just a hint used as a prefix
  to help display the variable. The type Abs is a new bultin type used
  for the constructors `Term.lam`, `Term.pi`, `Pattern.var`
  (bultins `AGDATERMLAM`, `AGDATERMPI` and `AGDAPATVAR`).

    data Abs (A : Set) : Set where
      abs : (s : String) (x : A) → Abs A
    {-# BUILTIN ABS    Abs #-}
    {-# BUILTIN ABSABS abs #-}

  Updated constructor types:

    Term.lam    : Hiding   → Abs Term → Term
    Term.pi     : Arg Type → Abs Type → Term
    Pattern.var : String   → Pattern

* QuoteContext.

  The `quoteContext' keyword now returns a reflected representation of the current context as
  a term of type `List (Arg Type)'. For example:

    test : (n : Nat) (x y : Fin n) → quoteContext ≡
      arg₀ (el (lit 0) (def (quote Fin) (arg₀ (var 1 []) ∷ []))) ∷
      arg₀ (el (lit 0) (def (quote Fin) (arg₀ (var 0 []) ∷ []))) ∷
      arg₀ (el (lit 0) (def (quote Nat) [])) ∷ []
    test n x y = refl

  In addition, tactics now take an additional argument for the current context, i.e. instead
  of type `Term → Term', they should now have type `List (Arg Type) → Term → Term'.

* New constructors have been added to the reflected term data type:

  data Term : Set where
    ...
    quote-term    : Term → Term
    quote-goal    : Abs Term → Term
    quote-context : Term
    unquote-term  : Term → Term

  {-# BUILTIN AGDATERMQUOTETERM    quote-term    #-}
  {-# BUILTIN AGDATERMQUOTEGOAL    quote-goal    #-}
  {-# BUILTIN AGDATERMQUOTECONTEXT quote-context #-}
  {-# BUILTIN AGDATERMUNQUOTE      unquote-term  #-}

  These constructors will never be present in a term returned by quoteTerm,
  quoteGoal or quoteContext, but they can appear in argument to unquote. This
  makes it possible to write tactics that compute terms containing calls to
  other tactics.

  Example: Implementing (a version of) the tactic keyword using reflection

    -- unquote (`tactic (quote x)) == tactic (λ _ → x)
    `tactic : QName → Term
    `tactic x = quote-goal (abs "g" (unquote-term (def x (vArg (var 0 []) ∷ []))))

* Reflection-based macros

  Macros are functions of type Term → .. → Term that are defined in a 'macro'
  block. A macro application 'f u v' for a macro f desugars to
  'unquote (f (quoteTerm u) (quoteTerm v))'.

  Limitations:

    - Macros cannot be recursive. This can be worked around by defining the
      recursive function outside the macro block and have the macro call the
      recursive function.

    - Macros cannot have non-reflected arguments. This will hopefully be
      allowed in the future.

  Silly example:

    macro
      plus-to-times : Term -> Term
      plus-to-times (def (quote _+_) (a ∷ b ∷ [])) = def (quote _*_) (a ∷ b ∷ [])
      plus-to-times v = v

    thm : (a b : Nat) → plus-to-times (a + b) ≡ a * b
    thm a b = refl

  Macros are most useful when writing tactics, since they let you hide the
  reflection machinery. For instance, suppose you have a solver

    magic : Term → Term

  that takes a reflected goal and outputs a proof (when successful). You can
  then use the `tactic function from above to define

    macro
      by-magic : Term
      by-magic = `tactic (quote magic)

  This lets you apply the magic tactic without any syntactic noise at all:

    thm : ¬ P ≡ NP
    thm = by-magic

* Modules in import directives

  When you use using/hiding/renaming on a name it now automatically applies to
  any module of the same name, unless you explicitly mention the module. For
  instance,

    open M using (D)

  is equivalent to

    open M using (D; module D)

  if M defines a module D. This is most useful for record and data types where
  you always get a module of the same name as the type.

  With this feature there is no longer useful to be able to qualify a
  constructor (or field) by the name of the data type even when it differs from
  the name of the corresponding module. The follow (weird) code used to work,
  but doesn't work anymore:

    module M where
      data D where
        c : D
    open M using (D) renaming (module D to MD)
    foo : D
    foo = D.c

  If you want to import only the type name and not the module you have to hide
  it explicitly:

    open M using (D) hiding (module D)

  See discussion on Issue 836 (https://github.com/agda/agda/issues/836).

Operator syntax
---------------

* The default fixity for syntax declarations has changed from -666 to 20.

* Sections.

  Operators can be sectioned by replacing arguments with underscores.
  There must not be any whitespace between these underscores and the
  adjacent nameparts. Examples:

    pred : ℕ → ℕ
    pred = _∸ 1

    T : Bool → Set
    T = if_then ⊤ else ⊥

    if : {A : Set} (b : Bool) → A → A → A
    if b = if b then_else_

  Sections are translated into lambda expressions. Examples:

    _∸ 1              ↦  λ section → section ∸ 1

    if_then ⊤ else ⊥  ↦  λ section → if section then ⊤ else ⊥

    if b then_else_   ↦  λ section section₁ →
                             if b then section else section₁

  Operator sections have the same fixity as the underlying operator
  (except in cases like "if b then_else_", in which the section is
  "closed", but the operator is not).

  Operator sections are not supported in patterns (with the exception
  of dot patterns), and notations coming from syntax declarations
  cannot be sectioned.

* A long-standing operator fixity bug has been fixed. As a consequence
  some programs that used to parse no longer do.

  Previously each precedence level was (incorrectly) split up into
  five separate ones, ordered as follows, with the earlier ones
  binding less tightly than the later ones:

    - Non-associative operators.

    - Left associative operators.

    - Right associative operators.

    - Prefix operators.

    - Postfix operators.

  Now this problem has been addressed. It is no longer possible to mix
  operators of a given precedence level but different associativity.
  However, prefix and right associative operators are seen as having
  the same associativity, and similarly for postfix and left
  associative operators.

  Examples
  --------

  The following code is no longer accepted:

    infixl 6 _+_
    infix  6 _∸_

    rejected : ℕ
    rejected = 1 + 0 ∸ 1

  However, the following previously rejected code is accepted:

    infixr 4 _,_
    infix  4 ,_

    ,_ : {A : Set} {B : A → Set} {x : A} → B x → Σ A B
    , y = _ , y

    accepted : Σ ℕ λ i → Σ ℕ λ j → Σ (i ≡ j) λ _ → Σ ℕ λ k → j ≡ k
    accepted = 5 , , refl , , refl

* The classification of notations with binders into the categories
  infix, prefix, postfix or closed has changed. [Issue 1450]

  The difference is that, when classifying the notation, only
  /regular/ holes are taken into account, not /binding/ ones.

  Example: The notation

    syntax m >>= (λ x → f) = x <- m , f

  was previously treated as infix, but is now treated as prefix.

* Notation can now include wildcard binders.

  Example: syntax Σ A (λ _ → B) = A × B

* If an overloaded operator is in scope with several distinct
  precedence levels, then several instances of this operator will be
  included in the operator grammar, possibly leading to ambiguity.
  Previously the operator was given the default fixity [Issue 1436].

  There is an exception to this rule: If there are multiple precedences,
  but at most one is explicitly declared, then only one instance will be
  included in the grammar. If there are no explicitly declared
  precedences, then this instance will get the default precedence, and
  otherwise it will get the declared precedence.

  If multiple occurrences of an operator are "merged" in the grammar,
  and they have distinct associativities, then they are treated as
  being non-associative.

  The three paragraphs above also apply to identical notations (coming
  from syntax declarations) for a given overloaded name.

  Examples:

    module A where

      infixr 5 _∷_
      infixr 5 _∙_
      infixl 3 _+_
      infix  1 bind

      syntax bind c (λ x → d) = x ← c , d

    module B where

      infix  5 _∷_
      infixr 4 _∙_
      -- No fixity declaration for _+_.
      infixl 2 bind

      syntax bind c d = c ∙ d

    module C where

      infixr 2 bind

      syntax bind c d = c ∙ d

    open A
    open B
    open C

    -- _∷_ is infix 5.
    -- _∙_ has two fixities: infixr 4 and infixr 5.
    -- _+_ is infixl 3.
    -- A.bind's notation is infix 1.
    -- B.bind and C.bind's notations are infix 2.

    -- There is one instance of "_ ∷ _" in the grammar, and one
    -- instance of "_ + _".

    -- There are three instances of "_ ∙ _" in the grammar, one
    -- corresponding to A._∙_, one corresponding to B._∙_, and one
    -- corresponding to both B.bind and C.bind.

Other changes
-------------

* Overloaded number literals.

  You can now overload natural number literals using the new builtin FROMNAT:

    {-# BUILTIN FROMNAT fromNat #-}

  The target of the builtin should be a defined name. Typically you would do
  something like

    record Number (A : Set) : Set where
      field fromNat : Nat → A

    open Number {{...}} public

    {-# BUILTIN FROMNAT fromNat #-}

  This will cause number literals 'n' to be desugared to 'fromNat n' before
  type checking.

* Negative number literals.

  Number literals can now be negative. For floating point literals it works as
  expected. For integer literals there is a new builtin FROMNEG that enables
  negative integer literals:

    {-# BUILTIN FROMNEG fromNeg #-}

  This causes negative literals '-n' to be desugared to 'fromNeg n'.

* Building records from modules.

  The "record { <fields> }" syntax is now extended to accept module names as
  well. Fields are thus defined using the corresponding definitions from the
  given module.

  For instance assuming this record type R and module M:

  record R : Set where
    field
      x : X
      y : Y
      z : Z

  module M where
    x = {! ... !}
    y = {! ... !}

  r : R
  r = record { M; z = {! ... !} }

  Previously one had to write `record { x = M.x; y = M.y; z = {! ... !} }`.

  More precisely this construction now supports any combination of explicit
  field definitions and applied modules.

  If a field is both given explicitly and available in one of the modules,
  then the explicit one takes precedence.

  If a field is available in more than one module then this is ambiguous
  and therefore rejected. As a consequence the order of assignments does
  not matter.

  The modules can be both applied to arguments and have import directives
  such as `hiding`, `using`, and `renaming`. In particular this construct
  subsumes the record update construction.

  Here is an example of record update:

  -- Record update. Same as: record r { y = {! ... !} }
  r2 : R
  r2 = record { R r; y = {! ... !} }

  A contrived example showing the use of hiding/renaming:

  module M2 (a : A) where
    w = {! ... !}
    z = {! ... !}

  r3 : A → R
  r3 a = record { M hiding (y); M2 a renaming (w to y) }

* Record patterns are now accepted.  Examples:

    swap : {A B : Set} (p : A × B) → B × A
    swap record{ proj₁ = a; proj₂ = b } = record{ proj₁ = b; proj₂ = a }

    thd3 : ...
    thd3 record{ proj₂ = record { proj₂ = c }} = c

* Unicode ellipsis character is allowed for the ellipsis token ... in
  `with` expressions.

* Instance search

  Performance has been improved, recursive instance search which was previously
  exponential in the depth is now only quadratic.


  Constructors of records and datatypes are not anymore automatically considered
  as instances, you have to do so explicitely, for instance:

    -- only [b] is an instance of D
    data D : Set where
      a : D
      instance
        b : D
      c : D

    -- the constructor is now an instance
    record tt : Set where
      instance constructor tt


  Instance search can now find arguments in variable types (but such candidates can
  only be lambda-bound variables, they can’t be declared as instances)

    module _ {A : Set} (P : A → Set) where

      postulate
        bla : {x : A} {{_ : P x}} → Set → Set

      -- Works, the instance argument is found in the context
      test :  {x : A} {{_ : P x}} → Set → Set
      test B = bla B

      -- Still forbidden, because [P] could be instantiated later to anything
      instance
       postulate
        forbidden : {x : A} → P x

* Detection of datatypes that satisfy K (i.e. sets)

  Agda will now try to detect datatypes that satisfy K when --without-K is
  enabled. A datatype satisfies K when it follows these three rules:
  - The types of all non-recursive constructor arguments should satisfy K
  - All recursive constructor arguments should be first-order
  - The types of all indices should satisfy K
  For example, the types [Nat], [List Nat], and [x ≡ x] (where x : Nat) are
  all recognized by Agda as satisfying K.

* New record directives eta-equality/no-eta-equality

  The keywords eta-equality/no-eta-equality enable/disable eta rules
  for the (inductive) record type being declared.

  record Σ (A : Set) (B : A -> Set) : Set where
    no-eta-equality
    constructor _,_
    field
      fst : A
      snd : B fst
  open Σ

  -- fail : ∀ {A : Set}{B : A -> Set} → (x : Σ A B) → x ≡ (fst x , snd x)
  -- fail x = refl
  --
  -- x != fst x , snd x of type Σ .A .B
  -- when checking that the expression refl has type x ≡ (fst x , snd x)


Goal and error display
======================

Type checking
=============

* Large indices.

  Force constructor arguments no longer count towards the size of a datatype.
  For instance, the definition of equality below is accepted.

    data _≡_ {a} {A : Set a} : A → A → Set where
      refl : ∀ x → x ≡ x

  This gets rid of the asymmetry that the version of equality which indexes
  only on the second argument could be small, but not the version above which
  indexes on both arguments.

* Call-by-need evaluation.

  Compile-time evaluation (during type checking and from the Emacs mode) is now
  using call-by-need rather than call-by-name.

Compiler backends
=================

* UHC compiler backend

  A new backend targeting the Utrecht Haskell Compiler (UHC) is available.
  It targets the UHC Core language, and it's design is inspired by
  the Epic backend.

  This backend is currently experimental, but should work for most Agda code.
  The Agda Standard Library has been updated to support this new backend.
  It properly supports having function clauses with different arities.

  The backend is disabled by default, as it will pull in some large
  dependencies. To enable the backend, use the "uhc" cabal flag when
  installing Agda:

    cabal install Agda -fuhc

  The backend also requires UHC to be installed. UHC is not available on
  Hackage and needs to be installed manually. This version of Agda has been
  tested with UHC 1.1.9.0, using other UHC versions may cause problems.
  To install UHC, the following commands can be used:

    git clone https://github.com/UU-ComputerScience/uhc.git
    cd uhc
    git checkout 0363bbcf4cf8c47d30c3a188e3e53b3f8454bbe4
    cd EHC
    ./configure
    make
    make install

  The Agda UHC compiler can be invoked from the command line using the
  flag --uhc:

    agda --uhc [--compile-dir=<DIR>] [--no-smashing]
        [--uhc-bin=<UHC>] [--uhc-dont-call-uhc] <FILE>.agda


  Smashing

  The Smashing optimisation from the Epic backend has been ported to
  the UHC backend. Smashing can be disabled globally using the --no-smashing
  command line option, or per definition using the {-# NO_SMASHING myDef #-}
  pragma. The NO_SMASHING pragma has two effects:
    1. The definition myDef will not be smashed.
    2. Any definition where the myDef definition is used in the type will
       not be smashed.
  The smashing optimisation is experimental and may change in later versions.


  FFI

  The UHC backend has a FFI to Haskell similar to MAlonzo's.
  The target Haskell code also needs to be compilable using UHC,
  which does not support the Haskell base library version 4.*.

  FFI pragmas for the UHC backend are not checked in any way. If the pragmas
  are wrong, bad things will happen.

  Imports
  Additional Haskell modules can be brought into scope
  with the IMPORT_UHC pragma:
  {-# IMPORT_UHC Data.Char #-}
  The Haskell modules UHC.Base and UHC.Agda.Builtins are always
  in scope and don't need to be imported explicitly.

  Datatypes
  Agda datatypes can be bound to Haskell datatypes as follows:
    Haskell:
        data HsData a = HsCon1 | HsCon2 (HsData a)
    Agda:
        data AgdaData (A : Set) : Set where
          AgdaCon1 : AgdaData A
          AgdaCon2 : AgdaData A -> AgdaData A
        {-# COMPILED_DATA_UHC AgdaData HsData HsCon1 HsCon2 #-}
    The mapping has to cover all constructors of the used Haskell datatype,
    else runtime behavior is undefined!

  There are special reserved names to bind Agda datatypes to certain Haskell
  datatypes. For example, this binds an Agda datatype
  to Haskell's list datatype:
    Agda:
        data AgdaList (A : Set) : Set where
          Nil : AgdaList A
          Cons : A -> AgdaList A -> AgdaList A
        {-# COMPILED_DATA_UHC AgdaList __LIST__ __NIL__ __CONS__ #-}

  The following "magic" datatypes are available:
    HS Datatype | Datatype Pragma | HS Constructor | Constructor Pragma
    ()            __UNIT__          ()               __UNIT__
    List          __LIST__          (:)              __CONS__
                                    []               __NIL__
    Bool          __BOOL__          True             __TRUE__
                                    False            __FALSE__

 Functions
  Agda postulates can be bound to Haskell functions. Similar as in MAlonzo,
  all arguments of type Set need to be dropped before calling Haskell
  functions. An example calling the return function:
    Agda:
        postulate hs-return : {A : Set} -> A -> IO A
        {-# COMPILED_UHC hs-return (\_ -> UHC.Agda.Builtins.primReturn) #-}


Tools
=====

LaTeX-backend
-------------

* The default font has been changed to XITS (which is part of TeX Live):

    http://www.ctan.org/tex-archive/fonts/xits/

  This font is more complete with respect to Unicode.
